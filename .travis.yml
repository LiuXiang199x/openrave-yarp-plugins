language: cpp
dist: trusty
sudo: required
os: linux

compiler:
  - gcc
  - clang

before_install:
  - sudo apt-get -qq update

  #-- Configure git for YCM
  - if [ ! `git config --get user.email` ]; then `git config --global user.email 'user@example.com'`; fi
  - if [ ! `git config --get user.name` ]; then `git config --global user.name 'Travis CI'`; fi

  # Set checkout branches
  - '[[ "$TRAVIS_EVENT_TYPE" = cron ]] && export ROBOTOLOGY_CHECKOUT=devel || export ROBOTOLOGY_CHECKOUT=master'

  #-- Install YARP and KDL deps
  - sudo apt-get install libeigen3-dev # Needed for creating YARP_math

  #-- Install OpenRAVE deps
  - sudo apt-get install libboost-all-dev
  - sudo apt-get install libqt4-dev qt4-dev-tools libxml2-dev libode-dev # libfcl-dev not on Trusty used in this travis
  - sudo apt-get install libsoqt4-dev libcoin80-dev

install:
  #-- Install color-debug
  - git clone https://github.com/roboticslab-uc3m/color-debug
  - cd color-debug && mkdir build && cd build
  - cmake ..
  - sudo make install
  - cd ../..

  #-- Install YCM
  - git clone --branch="$ROBOTOLOGY_CHECKOUT" https://github.com/robotology/ycm
  - cd ycm && mkdir build && cd build
  - cmake ..
  - make -j$(nproc)
  - sudo make install
  - cd ../..

  #-- Install YARP
  - git clone --branch=$ROBOTOLOGY_CHECKOUT https://github.com/robotology/yarp
  - cd yarp && mkdir build && cd build
  - cmake .. -DSKIP_ACE=ON
  - make -j$(nproc)
  - sudo make install
  - cd ../..

  #-- Install KDL
  - sudo apt-get install libeigen3-dev
  - git clone --branch master https://github.com/orocos/orocos_kinematics_dynamics
  - cd orocos_kinematics_dynamics/orocos_kdl && mkdir build && cd build
  - cmake ..
  - make -j$(nproc)
  - sudo make install
  - cd ../../..

  #-- Install OpenRAVE
  - git clone --branch master https://github.com/rdiankov/openrave.git
  - cd openrave && mkdir build && cd build
  - cmake ..
  - make -j$(nproc)
  - sudo make install
  - cd ../..

  # see http://gronlier.fr/blog/2015/01/adding-code-coverage-to-your-c-project/
  - if [ "$CXX" = "g++" ]; then wget http://ftp.de.debian.org/debian/pool/main/l/lcov/lcov_1.11.orig.tar.gz; fi
  - if [ "$CXX" = "g++" ]; then tar xf lcov_1.11.orig.tar.gz; fi
  - if [ "$CXX" = "g++" ]; then sudo make -C lcov-1.11/ install; fi
  - if [ "$CXX" = "g++" ]; then gem install coveralls-lcov; fi

before_script:
  - mkdir build && cd build
  - cmake .. -DENABLE_coverage=ON

script:
  - make && sudo make install && sudo ldconfig
  #- bin/test

after_success:
  # capture coverage info
  - if [ "$CXX" = "g++" ]; then lcov --directory . --capture --output-file coverage.info; fi
  # filter out system and test code
  - if [ "$CXX" = "g++" ]; then lcov --remove coverage.info  '/usr/*' 'test/*' --output-file coverage.info; fi
  # debug before upload
  - if [ "$CXX" = "g++" ]; then lcov --list coverage.info; fi
  # uploads to coveralls
  #- if [ "$CXX" = "g++" ]; then coveralls-lcov --source-encoding=ISO-8859-1 --repo-token InWqFy6VWMrEUzr2Rn8XV0cGqv3wXWo2d coverage.info; fi
  - if [ "$CXX" = "g++" ]; then coveralls-lcov --source-encoding=ISO-8859-1 coverage.info; fi

  - sudo make uninstall
